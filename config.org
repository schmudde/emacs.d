Welcome to Schmuddemacs!

My GNU Emacs configuration file is written to help me remember all the small decisions I made along the way and as a guide for any souls who might stumble upon this page.

Software updates will inevitably break existing configurations. I have often revisited a relevant snippet of Emacs Lisp code with a pithy comment and felt lost. The /Literate Programming/ style offers more context. After all, code was written primarily for humans to read, including all future Schmuddes, and only incidentally for machines to interpret.

Code evaluation is provided by ~org-babel~, which provides a method for extracting and evaluating Emacs Lisp expressions inside an org-mode file.

The move to Org Mode is currently a work in progress!

[[under-construction.gif]]

* Package Overview

** Essential Utilities

- magit, use-package
- TODO: also: projectile - helm-rg - avy - company - smartparens

- [[https://github.com/abo-abo/swiper][ivy]]: a completion system. I opted for ivy because it is cider and other packages recommend it.
- [[https://github.com/nonsequitur/smex][smex]], a package that improves the use of M-x.
- [[https://github.com/bbatsov/projectile][projectile]] to help navigate between files in a project.
- [[https://emacs-helm.github.io/helm/][helm]]
    - An Emacs framework for incremental completions and narrowing selections. It helps to rapidly complete file names, buffer names, or any other Emacs interactions requiring selecting an item from a list of possible choices.
    - [[https://github.com/bbatsov/helm-projectile][helm projectile]]: ~helm-projectile-grep~, ~helm-projectile-find-file~

#+BEGIN_SRC emacs-lisp :tangle no
(require 'helm)

(setq-default helm-M-x-fuzzy-match t)
(global-set-key "\C-x\C-m" 'helm-M-x)
(global-set-key "\C-c\C-m" 'helm-M-x)
#+END_SRC

** Editing Utilities

- Multiple Cursors

;;; TODO: - hydra - yasnippet(I see enough patterns that I create snippets for) - iedit - ob-restclient(I do all my api testing with)

** Programming Utilities

[[https://github.com/Fuco1/smartparens][Smartparens]]: is minor mode for Emacs that deals with parens pairs
and tries to be smart about it (donate [[https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=CEYP5YVHDRX8C][here]]).

Clojure: [[https://github.com/clojure-emacs/clojure-mode][clojure-mode]], [[https://github.com/clojure-emacs/cider][cider]] and [[https://github.com/clojure-emacs/clj-refactor.el][clj-refactor]], the main packages for Clojure development.

* Interface Improvements

I use the Emacs Web Wowser quite a bit, so I want to customize the search engine. When in EWW: ~M-x customize-mode~ &rarr; /Eww Search Prefix/ &rarr; ~https://html.duckduckgo.com/html?q=~

"/usr/share/applications/firefox.desktop"


I like having the day, date, and time displayed in my modeline. (Note that itâ€™s pointless to display seconds here, since the modeline does not automatically update every second, for efficiency purposes)

#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t)
(display-time-mode 1)
#+END_SRC

For the time being, simply use one of the default color themes. Can use ~M+x customize-theme~ to change themes.

#+BEGIN_SRC emacs-lisp
(load-theme 'wheatgrass)
#+END_SRC

* Editing Helpers

Enable the upcase-region function. I still have no idea why this is disabled by default.

#+BEGIN_SRC emacs-lisp
(put 'upcase-region 'disabled nil)
#+END_SRC

Whenever we visit a buffer that has no active edits, but the file has changed on disk, automatically reload it.

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode t)
#+END_SRC

Whenever the cursor is on a paren, highlight the matching paren.

#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

[[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Mark][The Mark and the Region]]

#+BEGIN_SRC emacs-lisp
(transient-mark-mode 1)
(delete-selection-mode t) ;; delete the selection with a keypress
#+END_SRC

** [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Indentation][Indentation]]

#+BEGIN_SRC emacs-lisp
;; keep my code tidy
(setq-default indent-tabs-mode nil)
(setq default-tab-width 4)
;; ?? (setq-default tab-width 8) ;; but maintain correct appearance
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Programming

Tell ~python-mode~ to use Python 3

#+BEGIN_SRC emacs-lisp
(setq python-shell-interpreter "python3")
#+END_SRC

* Fill Paragraphs

[[https://www.emacswiki.org/emacs/UnfillParagraph ][Unfill Paragraph]] by Stefan Monnier <foo at acm.org>. It is the opposite of ~fill-paragraph~.

#+BEGIN_SRC emacs-lisp
(defun unfill-paragraph (&optional region)
  "Takes a multi-line paragraph and makes it into a single line of text."
  (interactive (progn (barf-if-buffer-read-only) '(t)))
  (let ((fill-column (point-max))
        ;; This would override `fill-column' if it's an integer.
        (emacs-lisp-docstring-fill-column t))
    (fill-paragraph nil region)))
#+END_SRC

Handy key definition for ~unfill-paragraph~.

#+BEGIN_SRC emacs-lisp
(define-key global-map "\M-Q" 'unfill-paragraph)
#+END_SRC

* eMail

~mu4e~/[[https://old.reddit.com/r/emacs/comments/jvnzxl/mu4e_dashboard_using_orgmode_with_mu4e_links/][dashboard]] with ~offlineimap~

TODO

#+BEGIN_SRC emacs-lisp
;; mu4e
;; make sure mu4e is in your load-path
(add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
(require 'mu4e)

;; mu4e-maildir

;; these must start with a "/", and must exist
;; (i.e.. /home/user/Maildir/sent must exist)
;; you use e.g. 'mu mkdir' to make the Maildirs if they don't already exist
;; below are the defaults; if they do not exist yet, mu4e offers to
;; create them. they can also functions; see their docstrings.
(setq mu4e-sent-folder   "/Sent-1")
(setq mu4e-drafts-folder "/Drafts-1")
(setq mu4e-trash-folder  "/Trash")

;; smtp mail setting; these are the same that `gnus' uses.
;; Port 465?
;; (setq
;;    message-send-mail-function   'smtpmail-send-it
;;    smtpmail-default-smtp-server "mail.runbox.com"
;;    smtpmail-smtp-server         "mail.runbox.com"
;;   smtpmail-local-domain        "example.com")
#+END_SRC

;; Email configuration is all in an external, optional file.

;; (let ((mail-conf (expand-file-name "~/.emacs-mail.el")))
;;  (when (file-exists-p mail-conf)
;;    (load-file mail-conf)))

* Resources

TIP: [[https://orgmode.org/manual/Handling-Links.html][Handling Links]] in org-mode: ~org-toggle-link-display~: ~C-c C-l~ (with point on existing link)

- Seth Morabito's literate [[https://github.com/sethm/emacs-files/blob/master/configuration.org][GNU Emacs Configuration File]]
- [[https://dev.to/matheusemm/simple-emacs-configuration-for-clojure-development-11i3][Simple Emacs configuration for Clojure development]]
- Collections of configs
    - [[https://github.com/emacs-tw/awesome-emacs][Awesome Emacs]]
    - [[https://github.com/caisah/emacs.dz][Starter packs/defaults]]

* Miscellaneous Notes

I find printing a default message in the empty scratch buffer opened at startup occasionally useful for testing.

~(setq initial-scratch-message "Welcome in Emacs")~
